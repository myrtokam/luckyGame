using System;
using System.Runtime.CompilerServices;
using KinoGame;
using System.Collections.Generic;
using static System.Runtime.InteropServices.JavaScript.JSType;
using System.Text.RegularExpressions;
using System.ComponentModel;
using System.Numerics;

namespace KinoGame
{
    public class FinancialRegistration
    {

        // λιστα dictionary για oikonomika στοιχεια
        static List<Dictionary<string, object>> userBankAcounts = new List<Dictionary<string, object>>();
        private static readonly int expirationDate;


        //αρχικοποιηση οικονομικων στοιχειων
        public string iban { get; set; }
        public string paypalAcount { get; set; }
        public string googleAcount { get; set; }

        public int cardNumber { get; set; }
        public int cardCsv { get; set; }

        public DateTime cardExpiration { get; set; }

        public string BankName { get; set; }

        public string BankBic { get; set; }

        public FinancialRegistration(string iban, string paypalAcount, string googleAcount, int cardNumber, int cardCsv, DateTime cardExpiration, string BankName, string bankBic)

        {


            this.iban = iban;
            this.paypalAcount = paypalAcount;
            this.googleAcount = googleAcount;
            this.cardNumber = cardNumber;
            this.cardCsv = cardCsv;
            this.BankName = BankName;
            this.BankBic = bankBic;
        }



        public static void bankRegistration()
        {
            List<string> bankAcounts = new List<string>
            {
            "0. Εθνική Τράπεζα της Ελλάδος",
            "1. Alpha Bank",
            "2. Τράπεζα Πειραιώς",
            "3. Eurobank",
            "4. Attica Bank",
            "5. Τράπεζα της Ελλάδος",
            "6. Pancreta Bank",
            "7. Άλλο" };



            foreach (string bank in bankAcounts)
            {
                Console.WriteLine(bank);
            }
            Console.WriteLine("\n You Should Fillfield your finantion acount. \n you need this profile details for playing and profit collections");
            Console.WriteLine("\n Choose your bank from the list ");
            Console.WriteLine("\n ");
            var userInput = Console.ReadLine();

            bool validInput = false;
            while (!validInput)
            {
                switch (userInput)
                {
                    case "0":
                    case "1":
                    case "a":
                    case "A":

                        Console.WriteLine("you chose:Εθνική Τράπεζα της Ελλάδος");
                        validInput = true;
                        break;

                    case "2":
                    case "b":
                    case "B":

                        Console.WriteLine("you chose:Alpha Bank");
                        break;

                    case "3":
                    case "C":
                    case "c":
                        Console.WriteLine("you chose:Τράπεζα Πειραιώς");
                        validInput = true;
                        break;

                    case "4":
                    case "d":
                    case "D":
                        Console.WriteLine("you chose:Τράπεζα Eurobank");
                        validInput = true;
                        break;

                    case "5":
                    case "E":
                    case "e":
                        Console.WriteLine("you chose:Τράπεζα Eurobank");
                        validInput = true;
                        break;

                    case "6":
                    case "f":
                    case "F":
                        Console.WriteLine("you chose: Τράπεζα Attica Bank");
                        validInput = true;
                        break;

                    case "7":
                    case "g":
                    case "G":

                        Console.WriteLine("You chose: Άλλο");
                        Console.WriteLine("\nWrite your bank's name:");
                        string userBanksName = Console.ReadLine();
                        while (string.IsNullOrEmpty(userBanksName) || string.IsNullOrWhiteSpace(userBanksName) || int.TryParse(userBanksName, out _))
                        {
                            Console.WriteLine("\nGive a valid name:");
                            userBanksName = Console.ReadLine();
                        }

                        Console.WriteLine("\nWrite your bank's BIC:");
                        string userBankBic = Console.ReadLine();
                        while (string.IsNullOrEmpty(userBankBic) || string.IsNullOrWhiteSpace(userBankBic) || int.TryParse(userBankBic, out _))
                        {
                            Console.WriteLine("\nGive a valid BIC:");
                            userBankBic = Console.ReadLine();
                        }

                        Console.WriteLine($"\nBank Name: {userBanksName}, BIC: {userBankBic}");
                        validInput = true;
                        break;
                    default:
                        Console.WriteLine("Choose a valid number from the list:");
                        break;
                }
            }
        }

        public static void cardRegistration()
        {
            string cardNumberPattern = @"^\d{16}$";
            string cardExpirationPattern = @"^(0[1-9]|1[0-2])\/(\d{2}|\d{4})$";
            string cardCsvPattern = @"^\d{3}$";

            string cardNumber;
            string cardExpiration;
            string cardCsv;


            do
            {
                Console.WriteLine("Write your card number (16 digits):");
                cardNumber = Console.ReadLine();
                if (!Regex.IsMatch(cardNumber, cardNumberPattern))
                {
                    Console.WriteLine("Invalid card number. Please enter a 16-digit card number.");
                }
            } while (!Regex.IsMatch(cardNumber, cardNumberPattern));


            do
            {
                Console.WriteLine("Write your card's expiration date. date format (months/year):");
                cardExpiration = Console.ReadLine();
                if (!Regex.IsMatch(cardExpiration, cardExpirationPattern))
                {
                    Console.WriteLine("Invalid expiration date. Please try again.");
                }
            } while (!Regex.IsMatch(cardExpiration, cardExpirationPattern));

            do
            {
                Console.WriteLine("Write your card's CSV (3 digits):");
                cardCsv = Console.ReadLine();
                if (!Regex.IsMatch(cardCsv, cardCsvPattern))
                {
                    Console.WriteLine("Invalid CSV. Please enter a 3-digit CSV.");
                }
            } while (!Regex.IsMatch(cardCsv, cardCsvPattern));

            Console.WriteLine("Your registration was successful.");
        }
    }
}
